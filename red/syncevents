#!/usr/bin/env python2
import os, sys, subprocess
import re
import multiprocessing as mp
from collections import Counter
import tempfile
import argparse
import signal



def exec_cmd(command): # return stdout, stderr output of a command
    return subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()

def is_required(name, filter, exclude):
    for fil in filter:
        if fil not in name:
            return 0
    for exc in exclude:
        if exc in name:
            return 0
    return 1



def get_events_folders(filter=['limited'], exclude=[], remote_dir='torchcap', skip_lig=False, skip_inria=False):
    if skip_lig:
        out_lig = None
    else:
        out_lig, _ = exec_cmd('ssh elbayadm@decore0.ligone "ls ~/work/%s/events"' % remote_dir)
        out_lig = out_lig.decode('utf-8').splitlines()

    if skip_inria:
        out_inria = None
    else:
        out_inria, _ = exec_cmd('ssh pascal "ls ~/work/%s/events"' % remote_dir)
        out_inria = out_inria.decode('utf-8').splitlines()
    # filter:
    if out_lig:
        out_lig = [(model, 'lig') for model in out_lig if is_required(model, filter, exclude)]
        print('List of events folders (lig):', out_lig)
    else:
        out_lig = []
    if out_inria:
        out_inria = [(model, 'inria') for model in out_inria if is_required(model, filter, exclude)]
        print('List of events folders (inria):', out_inria)
    else:
        out_inria = []
    return out_lig + out_inria


def sync_required(models, local_dir="cap", remote_dir='torchcap'):
    parentdir = tempfile.mkdtemp(dir='/Users/elbayadm/work/Events/%s' % local_dir)
    print('tmp dir:', parentdir)
    for model, server in models:
        holder = '%s/%s' % (parentdir, model)
        if not os.path.isdir(holder):
            os.makedirs(holder)
        if server == 'inria':
            print('syncing %s @inria' % model)
            o, e = exec_cmd('sshfs pascal:/home/thoth/melbayad/work/%s/events/%s %s -o auto_cache,reconnect,defer_permissions,noappledouble' % (remote_dir, model, holder))
            if e:
                print('Error:', e)
        elif server == 'lig':
            print('syncing %s @lig' % model)
            o, e = exec_cmd('sshfs elbayadm@decore0.ligone:/home/getalp/elbayadm/work/%s/events/%s %s -o auto_cache,reconnect,defer_permissions,noappledouble' % (remote_dir, model, holder))
            if e:
                print('Error:', e)
        else:
            raise ValueError('unknwon server %s' % server)
    return parentdir


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--dir', '-d', type=str, default='attn', help='working dir; either cap or nmt')
    parser.add_argument('--filter', '-f', nargs="+", help='keywords to include')
    parser.add_argument('--exclude', '-e', nargs="+", help='keywords to exculde')
    parser.add_argument('--ligout', '-l', action='store_true')
    parser.add_argument('--inriaout', '-i', action='store_true')


    args = parser.parse_args()
    if not args.filter:
        args.filter = []
    if not args.exclude:
        args.exclude = []
    if args.dir == "cap":
        remote_dir = "torchcap"
        local_dir = 'cap'
    elif args.dir == "nmto":
        remote_dir = 'seq2seq_v1'
        local_dir = 'nmto'
    elif args.dir == "nmtr":
        remote_dir = 'seq2seq_rep'
        local_dir = 'nmtr'
    elif args.dir == "nmt":
        remote_dir = 'seq2seq'
        local_dir = 'nmt'
    elif args.dir == "attn":
        remote_dir = 'attn2d'
        local_dir = 'nmt'
    elif args.dir == "clean":
        remote_dir = 'clean'
        local_dir = 'nmt'
    elif args.dir == "try":
        remote_dir = 'try'
        local_dir = 'nmt'

    print('filters:', args.filter, 'excluding:', args.exclude)
    models = get_events_folders(filter=args.filter,
                                exclude=args.exclude,
                                remote_dir=remote_dir,
                                skip_lig=args.ligout,
                                skip_inria=args.inriaout)
    if models:
        parentdir = sync_required(models,
                                  local_dir=local_dir,
                                  remote_dir=remote_dir)
        def signal_handler(*args):
            print('You pressed Ctrl+C!')
            print('Unmounting events folders')
            for model in models:
                exec_cmd('umount %s/%s' % (parentdir, model[0]))
                os.rmdir("%s/%s" % (parentdir, model[0]))
            os.rmdir(parentdir)
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        port = 6600
        port_used = 1
        while port_used:
            print('use CTRL-C to quit')
            print('Tensorboad @%d' % port)
            o, e = exec_cmd('tensorboard --logdir=%s --port %d' % (parentdir, port))
            print(o, e)
            if 'already' in e:
                print('error:', e)
                port += 1
            else:
                port_used = 0


