{
	"folder_history":
	[
		"/home/maha/work/imcap",
		"/home/maha/Dropbox/PhD/pages",
		"/home/maha/Dropbox/rand/M-Notes",
		"/home/maha/ecp/lsd",
		"/home/maha/work/imcap/",
		"/home/maha/Dropbox/PhD/documentation-theme-jekyll",
		"/home/maha/Dropbox/PhD/RefsJournal",
		"/home/maha/work/imcap/tlucas",
		"/home/maha",
		"/home/maha/.oh-my-zsh/plugins/git"
	],
	"last_version": 3126,
	"last_window_id": 59,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 480.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"prin",
						"print_warn"
					],
					[
						"prepa",
						"prepare_sentence"
					],
					[
						"shuffl",
						"shuffle_boxes"
					],
					[
						"print",
						"print_layer"
					],
					[
						"output_s",
						"output_shape"
					],
					[
						"__pr",
						"__proposals_default__"
					],
					[
						"__buil",
						"__build_main__"
					],
					[
						"batch",
						"batch_loss_val"
					],
					[
						"strat",
						"start_from"
					],
					[
						"init",
						"init_epoc"
					],
					[
						"start",
						"start_from"
					],
					[
						"up",
						"updates2"
					],
					[
						"__",
						"__forwardpass"
					],
					[
						"l_cnn",
						"l_cnn_encode"
					],
					[
						"_b",
						"__build__main"
					],
					[
						"l_in",
						"l_input_regions"
					],
					[
						"_p",
						"_proposals_1"
					],
					[
						"re",
						"readCFG_traintime"
					],
					[
						"norm",
						"norm2"
					],
					[
						"E",
						"EnsembleModel"
					],
					[
						"model",
						"models_list"
					],
					[
						"eb",
						"emb_cnn"
					],
					[
						"sent",
						"sent_emb"
					],
					[
						"len_",
						"len_vocab"
					],
					[
						"_",
						"_proposals_4"
					]
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 164.0,
				"last_filter": "show",
				"selected_items":
				[
					[
						"show",
						"SublimeLinter: Show All Errors"
					],
					[
						"sh",
						"SublimeLinter: Show All Errors"
					],
					[
						"sublimeL",
						"Preferences: SublimeLinter Settings – User"
					],
					[
						"sublime",
						"SublimeLinter: Disable Linter"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"list",
						"Package Control: List Packages"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"show all",
						"SublimeLinter: Show All Errors"
					],
					[
						"disa",
						"SublimeLinter: Disable Linter"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"Boy",
						"Boxy Theme: Activation"
					]
				],
				"width": 503.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/maha/work/imcap/ImageCaptioningModels_lrcn.py",
				"/home/maha/work/imcap/CNN.py",
				"/home/maha/work/imcap/predict.py",
				"/home/maha/work/imcap/parse_tools.py",
				"/home/maha/work/imcap/models.py",
				"/home/maha/work/imcap/ImageCaptioningModels.py",
				"/home/maha/work/imcap/ImageCaptioningModels_normal.py",
				"/home/maha/work/imcap/train.py",
				"/home/maha/work/imcap/evaluate.py",
				"/home/maha/work/imcap/NNutils.py",
				"/home/maha/work/imcap/config/tensor.yaml",
				"/home/maha/work/imcap/config/default_train.ini",
				"/home/maha/work/imcap/TProd3.py",
				"/home/maha/work/imcap/config/lrcn.yaml",
				"/home/maha/Dropbox/rand/M-Notes/Budget.md",
				"/home/maha/work/imcap/untitled.py",
				"/home/maha/work/imcap/ImageCaptioningModels_tensor.py",
				"/home/maha/work/imcap/tlucas/RNNTraining.py",
				"/home/maha/work/imcap/SPP.py",
				"/home/maha/work/imcap/roi_pooling.py",
				"/home/maha/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
				"/home/maha/work/imcap/save_layers.py",
				"/home/maha/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/maha/work/imcap/ImageCaptioningModels",
				"/home/maha/work/imcap/PrepareData.py",
				"/home/maha/work/imcap/utils.py",
				"/home/maha/work/imcap/ImageCaptioningModels_transformer.py",
				"/home/maha/work/imcap/config/default_train.yaml",
				"/home/maha/work/imcap/Ensemble_model.py",
				"/home/maha/work/imcap/CaptionEvaluation_class_tensor_feedback.py",
				"/home/maha/work/imcap/RNNTraining.py",
				"/home/maha/work/imcap/CaptionEvaluation.py",
				"/home/maha/work/imcap/CaptionEvaluation_class_transformer.py",
				"/home/maha/work/imcap/config/default.yaml",
				"/home/maha/.zshrc",
				"/home/maha/.vimrc",
				"/home/maha/.oh-my-zsh/plugins/git/git.plugin.zsh"
			],
			"find":
			{
				"height": 48.0
			},
			"find_in_files":
			{
				"height": 130.0,
				"where_history":
				[
					""
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"num_reg",
					"setup",
					"fc7_drop",
					"cnn_model",
					"net.cnn",
					"self.cnn_model",
					"self.cnn_models",
					"self.cnn_model",
					"46°8",
					"pickle.load",
					"get_param_dict_tied",
					"set_all_layers_tags",
					"pickle.",
					"prep_image_RCNN",
					"prep_image_RCNN_old",
					"build_model_RCNN",
					"build_modelç",
					"build_RCNN",
					"num_boxes",
					"num_regions",
					"add_detbranch",
					"add_detbran",
					"add_detbranch",
					"add_detbranhc",
					",name",
					"theano.tensor",
					"T.",
					"plt.",
					"json.",
					"build_model_RCNN",
					"save_epoc",
					"setup(",
					"self.functions['loss']",
					"compile",
					"compile_fc",
					"det_boxes",
					"def build",
					"subproces",
					"subpr",
					"buildNe",
					"forward",
					"forwardpass",
					"forwardpassforwardpass",
					"forwardpass",
					"self.output",
					"self.out",
					"self.outpit",
					"__forwa",
					"__for",
					"__fprwa",
					"setup",
					"__forw",
					"__for",
					"__forwa",
					"__for",
					"forward",
					"__forwa",
					"__forwardpass__",
					"setparams(",
					"softmax",
					"norm2",
					"scale",
					"norm1",
					"buildNE",
					"scaledown",
					"norm2",
					"norm1",
					"lrcn",
					"random.",
					"pickle.",
					"time.",
					"os.",
					"pylab",
					"np.",
					"lasagne.",
					"ConcatLayer",
					"EmbeddingLayer",
					"ExpressionLayer",
					"get_all_params",
					"identity",
					"Recurrence",
					"batch_gen",
					"calc_cross_ent",
					"scaledown",
					"norm1",
					"softmax",
					"get_param_dict_tied",
					"set_param_dict",
					"add_names_layers_and_params",
					"check_init",
					"check_names",
					"set_all_layers_tags",
					"print_war",
					"print_f",
					"add_name",
					"CNN.",
					"model.CFG['batch_size']",
					"visu",
					"BEAM_SIZE=",
					"print_wa",
					"beam",
					"beam_size",
					"generateCaptions",
					"gen_batch",
					"BEAM_SIZE",
					"predict_batch_beam(",
					"word_t",
					"predict_batch_beam",
					"word_to_index",
					"index_to",
					"index_to_word",
					"floatX",
					"predict_batch_vis",
					"t_inp",
					"yeield",
					"batch_gen",
					"batch_gent",
					"proposals",
					"im_size",
					"ggc",
					"gcc",
					"TransformerLayerggc",
					"use_flip=Non",
					"TranslateLayer",
					"zoom",
					"print",
					"build_se",
					"build_i"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					", name",
					"batch_size",
					"l_input_regions",
					"self.layers['dropout_output']",
					"self.layers['gru']",
					"self.layers['prev_gru']",
					"self.layers['cell_input']",
					"self.features['region']",
					"self.features['hid']",
					"self.features['conv']",
					"self.features['rnn']",
					"self.features['cnn']",
					"gt_sentence",
					"count_rot",
					"im_id",
					"net.word_to_index",
					"net.im_size",
					"net.CFG",
					"self.graph_inputs",
					"self.graph_inputs['gt_sent']",
					"self.graph_inputs['mask']",
					"self.graph_inputs",
					"l_prev_gru\"",
					"l_input_regions",
					"l_flatten",
					"self.functions['sent']",
					"'boxes'",
					"'img'",
					"'img2'",
					"'sent'",
					"'cnn'",
					"self.layers['region_feedback2'] =",
					"emb_sent",
					"T.extra_ops.repeat(X, self.multi, axis=0)",
					"self.CFG['batch_size'] * self.multi",
					"self.layers['input_img2']",
					"l_input_regions",
					"l_tensor",
					"l_tensor2",
					"l_weighted_image_conv_reduced",
					"l_feedback_po2",
					"l_feedback_co2",
					"l_feedback_po1",
					"l_feedback_co1",
					"l_weighted_image_reshaped",
					"l_shp1",
					"}",
					"l_input_regions_highres",
					"self.layers['gru_states']",
					"'l_input_regions_cell'",
					"l_weighted_region",
					"l_cell_concat",
					"l_region2",
					"l_region_feedback",
					"l_region_feedback2",
					"name='l_input_regions'",
					"name='l_input_regions",
					"l_input_regions",
					"self.layers['input_regions']",
					"l_input_regions_cell",
					"'l_input_regions'",
					"'",
					"name='l_",
					"self.functions['out'] ",
					"self.layers['prev_gru']",
					"self.layers['input_reg']",
					"self.layers['cell_input']",
					"self.layers['input_sentence']",
					"self.layers['sentence_embedding']",
					"self.layers['input_cnn']",
					"self.functions['cnn']",
					"self.layers['boxes']",
					"self.layers['input_img']",
					"self.cnn_embedding",
					"self.features['boxes']",
					"self.features['region']",
					"self.features['hid']",
					"self.features['img']",
					"self.features['img2']",
					"self.features['conv']",
					"self.features['cell']",
					"self.features['rnn']",
					"self.features['sent_sym']",
					"self.features['cnn_sym']",
					"self.mask_sym",
					"T.",
					"l_input_regions",
					"self.layers['input_regions']",
					"self.layers['conv_input']",
					"self.layers['conv']",
					"self.layers['input_img2']",
					"vgg16_det",
					"self.layers['out']",
					"self.layers['cnn_embedding']",
					"self.layers['cnn_embedding2']",
					"self.layers['input_reg']",
					"self.layers['out_reg']",
					"self.layers['decoder']",
					"self.layers['boxes']",
					"self.layers['input_regions']",
					"self.layers['dropout_output']",
					"self.layers['gru']",
					"self.layers['prev_gru']",
					"self.layers['cell_input']",
					", ",
					")",
					"(",
					"net.layers['out']",
					"net.losses['val']",
					"net.losses['tr']",
					"DBVAL",
					"DBTRAIN",
					"STARTING_TIME",
					"self.functions['loss'],",
					"self.functions['loss'] ",
					"self.losses['tr']",
					"self.losses['val']",
					"self.cnn_embedding",
					"self.functions['out'] ",
					"self.functions['sent']",
					"self.functions['cnn']",
					"self.functions['val']",
					"self.functions['train']",
					"self.loss['val']",
					"self.loss['tr']",
					"tmp_loss",
					"'boxes_sym'",
					"'img2_sym'"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 28.0
			},
			"input":
			{
				"height": 44.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"output.unsaved_changes":
			{
				"height": 118.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 90.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 278.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 640.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"prin",
						"print_warn"
					],
					[
						"prepa",
						"prepare_sentence"
					],
					[
						"shuffl",
						"shuffle_boxes"
					],
					[
						"print",
						"print_layer"
					],
					[
						"output_s",
						"output_shape"
					],
					[
						"__pr",
						"__proposals_default__"
					],
					[
						"__buil",
						"__build_main__"
					],
					[
						"batch",
						"batch_loss_val"
					],
					[
						"strat",
						"start_from"
					],
					[
						"init",
						"init_epoc"
					],
					[
						"start",
						"start_from"
					],
					[
						"up",
						"updates2"
					],
					[
						"__",
						"__forwardpass"
					],
					[
						"l_cnn",
						"l_cnn_encode"
					],
					[
						"_b",
						"__build__main"
					],
					[
						"l_in",
						"l_input_regions"
					],
					[
						"_p",
						"_proposals_1"
					],
					[
						"re",
						"readCFG_traintime"
					],
					[
						"norm",
						"norm2"
					],
					[
						"E",
						"EnsembleModel"
					],
					[
						"model",
						"models_list"
					],
					[
						"eb",
						"emb_cnn"
					],
					[
						"sent",
						"sent_emb"
					],
					[
						"len_",
						"len_vocab"
					],
					[
						"_",
						"_proposals_4"
					]
				]
			},
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 164.0,
				"last_filter": "show",
				"selected_items":
				[
					[
						"show",
						"SublimeLinter: Show All Errors"
					],
					[
						"sh",
						"SublimeLinter: Show All Errors"
					],
					[
						"sublimeL",
						"Preferences: SublimeLinter Settings – User"
					],
					[
						"sublime",
						"SublimeLinter: Disable Linter"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"list",
						"Package Control: List Packages"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"show all",
						"SublimeLinter: Show All Errors"
					],
					[
						"disa",
						"SublimeLinter: Disable Linter"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"Boy",
						"Boxy Theme: Activation"
					]
				],
				"width": 503.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/maha/work/imcap/ImageCaptioningModels_lrcn.py",
				"/home/maha/work/imcap/CNN.py",
				"/home/maha/work/imcap/predict.py",
				"/home/maha/work/imcap/parse_tools.py",
				"/home/maha/work/imcap/models.py",
				"/home/maha/work/imcap/ImageCaptioningModels.py",
				"/home/maha/work/imcap/ImageCaptioningModels_normal.py",
				"/home/maha/work/imcap/train.py",
				"/home/maha/work/imcap/evaluate.py",
				"/home/maha/work/imcap/NNutils.py",
				"/home/maha/work/imcap/config/tensor.yaml",
				"/home/maha/work/imcap/config/default_train.ini",
				"/home/maha/work/imcap/TProd3.py",
				"/home/maha/work/imcap/config/lrcn.yaml",
				"/home/maha/Dropbox/rand/M-Notes/Budget.md",
				"/home/maha/work/imcap/untitled.py",
				"/home/maha/work/imcap/ImageCaptioningModels_tensor.py",
				"/home/maha/work/imcap/tlucas/RNNTraining.py",
				"/home/maha/work/imcap/SPP.py",
				"/home/maha/work/imcap/roi_pooling.py",
				"/home/maha/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
				"/home/maha/work/imcap/save_layers.py",
				"/home/maha/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/maha/work/imcap/ImageCaptioningModels",
				"/home/maha/work/imcap/PrepareData.py",
				"/home/maha/work/imcap/utils.py",
				"/home/maha/work/imcap/ImageCaptioningModels_transformer.py",
				"/home/maha/work/imcap/config/default_train.yaml",
				"/home/maha/work/imcap/Ensemble_model.py",
				"/home/maha/work/imcap/CaptionEvaluation_class_tensor_feedback.py",
				"/home/maha/work/imcap/RNNTraining.py",
				"/home/maha/work/imcap/CaptionEvaluation.py",
				"/home/maha/work/imcap/CaptionEvaluation_class_transformer.py",
				"/home/maha/work/imcap/config/default.yaml",
				"/home/maha/.zshrc",
				"/home/maha/.vimrc",
				"/home/maha/.oh-my-zsh/plugins/git/git.plugin.zsh"
			],
			"find":
			{
				"height": 48.0
			},
			"find_in_files":
			{
				"height": 130.0,
				"where_history":
				[
					""
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"num_reg",
					"setup",
					"fc7_drop",
					"cnn_model",
					"net.cnn",
					"self.cnn_model",
					"self.cnn_models",
					"self.cnn_model",
					"46°8",
					"pickle.load",
					"get_param_dict_tied",
					"set_all_layers_tags",
					"pickle.",
					"prep_image_RCNN",
					"prep_image_RCNN_old",
					"build_model_RCNN",
					"build_modelç",
					"build_RCNN",
					"num_boxes",
					"num_regions",
					"add_detbranch",
					"add_detbran",
					"add_detbranch",
					"add_detbranhc",
					",name",
					"theano.tensor",
					"T.",
					"plt.",
					"json.",
					"build_model_RCNN",
					"save_epoc",
					"setup(",
					"self.functions['loss']",
					"compile",
					"compile_fc",
					"det_boxes",
					"def build",
					"subproces",
					"subpr",
					"buildNe",
					"forward",
					"forwardpass",
					"forwardpassforwardpass",
					"forwardpass",
					"self.output",
					"self.out",
					"self.outpit",
					"__forwa",
					"__for",
					"__fprwa",
					"setup",
					"__forw",
					"__for",
					"__forwa",
					"__for",
					"forward",
					"__forwa",
					"__forwardpass__",
					"setparams(",
					"softmax",
					"norm2",
					"scale",
					"norm1",
					"buildNE",
					"scaledown",
					"norm2",
					"norm1",
					"lrcn",
					"random.",
					"pickle.",
					"time.",
					"os.",
					"pylab",
					"np.",
					"lasagne.",
					"ConcatLayer",
					"EmbeddingLayer",
					"ExpressionLayer",
					"get_all_params",
					"identity",
					"Recurrence",
					"batch_gen",
					"calc_cross_ent",
					"scaledown",
					"norm1",
					"softmax",
					"get_param_dict_tied",
					"set_param_dict",
					"add_names_layers_and_params",
					"check_init",
					"check_names",
					"set_all_layers_tags",
					"print_war",
					"print_f",
					"add_name",
					"CNN.",
					"model.CFG['batch_size']",
					"visu",
					"BEAM_SIZE=",
					"print_wa",
					"beam",
					"beam_size",
					"generateCaptions",
					"gen_batch",
					"BEAM_SIZE",
					"predict_batch_beam(",
					"word_t",
					"predict_batch_beam",
					"word_to_index",
					"index_to",
					"index_to_word",
					"floatX",
					"predict_batch_vis",
					"t_inp",
					"yeield",
					"batch_gen",
					"batch_gent",
					"proposals",
					"im_size",
					"ggc",
					"gcc",
					"TransformerLayerggc",
					"use_flip=Non",
					"TranslateLayer",
					"zoom",
					"print",
					"build_se",
					"build_i"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					", name",
					"batch_size",
					"l_input_regions",
					"self.layers['dropout_output']",
					"self.layers['gru']",
					"self.layers['prev_gru']",
					"self.layers['cell_input']",
					"self.features['region']",
					"self.features['hid']",
					"self.features['conv']",
					"self.features['rnn']",
					"self.features['cnn']",
					"gt_sentence",
					"count_rot",
					"im_id",
					"net.word_to_index",
					"net.im_size",
					"net.CFG",
					"self.graph_inputs",
					"self.graph_inputs['gt_sent']",
					"self.graph_inputs['mask']",
					"self.graph_inputs",
					"l_prev_gru\"",
					"l_input_regions",
					"l_flatten",
					"self.functions['sent']",
					"'boxes'",
					"'img'",
					"'img2'",
					"'sent'",
					"'cnn'",
					"self.layers['region_feedback2'] =",
					"emb_sent",
					"T.extra_ops.repeat(X, self.multi, axis=0)",
					"self.CFG['batch_size'] * self.multi",
					"self.layers['input_img2']",
					"l_input_regions",
					"l_tensor",
					"l_tensor2",
					"l_weighted_image_conv_reduced",
					"l_feedback_po2",
					"l_feedback_co2",
					"l_feedback_po1",
					"l_feedback_co1",
					"l_weighted_image_reshaped",
					"l_shp1",
					"}",
					"l_input_regions_highres",
					"self.layers['gru_states']",
					"'l_input_regions_cell'",
					"l_weighted_region",
					"l_cell_concat",
					"l_region2",
					"l_region_feedback",
					"l_region_feedback2",
					"name='l_input_regions'",
					"name='l_input_regions",
					"l_input_regions",
					"self.layers['input_regions']",
					"l_input_regions_cell",
					"'l_input_regions'",
					"'",
					"name='l_",
					"self.functions['out'] ",
					"self.layers['prev_gru']",
					"self.layers['input_reg']",
					"self.layers['cell_input']",
					"self.layers['input_sentence']",
					"self.layers['sentence_embedding']",
					"self.layers['input_cnn']",
					"self.functions['cnn']",
					"self.layers['boxes']",
					"self.layers['input_img']",
					"self.cnn_embedding",
					"self.features['boxes']",
					"self.features['region']",
					"self.features['hid']",
					"self.features['img']",
					"self.features['img2']",
					"self.features['conv']",
					"self.features['cell']",
					"self.features['rnn']",
					"self.features['sent_sym']",
					"self.features['cnn_sym']",
					"self.mask_sym",
					"T.",
					"l_input_regions",
					"self.layers['input_regions']",
					"self.layers['conv_input']",
					"self.layers['conv']",
					"self.layers['input_img2']",
					"vgg16_det",
					"self.layers['out']",
					"self.layers['cnn_embedding']",
					"self.layers['cnn_embedding2']",
					"self.layers['input_reg']",
					"self.layers['out_reg']",
					"self.layers['decoder']",
					"self.layers['boxes']",
					"self.layers['input_regions']",
					"self.layers['dropout_output']",
					"self.layers['gru']",
					"self.layers['prev_gru']",
					"self.layers['cell_input']",
					", ",
					")",
					"(",
					"net.layers['out']",
					"net.losses['val']",
					"net.losses['tr']",
					"DBVAL",
					"DBTRAIN",
					"STARTING_TIME",
					"self.functions['loss'],",
					"self.functions['loss'] ",
					"self.losses['tr']",
					"self.losses['val']",
					"self.cnn_embedding",
					"self.functions['out'] ",
					"self.functions['sent']",
					"self.functions['cnn']",
					"self.functions['val']",
					"self.functions['train']",
					"self.loss['val']",
					"self.loss['tr']",
					"tmp_loss",
					"'boxes_sym'",
					"'img2_sym'"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 28.0
			},
			"input":
			{
				"height": 44.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"output.unsaved_changes":
			{
				"height": 118.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,0,27,640,507,3200,1080",
			"replace":
			{
				"height": 90.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 278.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 59
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
