import argparse
import configargparse
import sys
import os
from utils import print_fail


def cmd_line_parser(default_file):
    """
    returns a dictionaru with everything set and overwritten options
    """
    parser = configargparse.ArgParser(default_config_files=[default_file])
    parser.add('-c', '--config', is_config_file=True, help='config file path')
    #  options starting with '--' can be set in config file
    # Help in default config file
    # Basics
    parser.add('filename', default='', help='pkl file with the trained model')
    parser.add('-m', '--mode', dest='mode', type=str)
    # DEBUG settings:
    parser.add('-p', '--print', action='store_true')
    parser.add('-v', '--verbose', action='store_true')
    parser.add('--plot_loss', action='store_true')
    parser.add('-s', '--small_dataset', action='store_true')
    # Loading params
    parser.add('-f', '--force_load', action='store_true')
    parser.add('--force_current', action='store_true')
    parser.add('--start_from', type=str)
    parser.add('--convert_transformer', action='store_true')
    parser.add('--restart', action='store_true')
    parser.add('--load_voc_from', type=str)

    # Model params
    parser.add('-b', '--beam_size', dest='beam_size', type=int)
    parser.add('--batch_size', dest='batch_size', type=int)
    parser.add('--im_size', type=int)
    parser.add('-r', '--conv_reduced', type=int)
    parser.add('--tensor_cond_word', action='store_true')
    parser.add('--rectify', action='store_true')
    parser.add('--conv_normalized', type=int)
    parser.add('--start_normalized', type=int)
    parser.add('--tensor_tied', dest='tensor_tied', type=int)
    parser.add('--reducedw_size', dest='reducedw_size', type=int)
    parser.add('--softmax', type=str)
    parser.add('--max_sent', dest='max_sent', type=int)
    parser.add('--new_save', type=int)
    parser.add('--use_flip', type=str)

    parser.add('--feedback', dest='feedback', type=int)
    parser.add('--rnn_dropout', type=float)
    parser.add('--it_size', type=int)
    parser.add('--dropout_regions', type=int)
    parser.add('--state_size', type=int)
    parser.add('--repeated_words', type=int)
    parser.add('--num_regions', type=int)
    parser.add('--clean_masks', type=int)
    parser.add('--save_partial', type=int)

    parser.add('--cnn_model', type=str)
    parser.add('--resnet_layer', type=str)
    parser.add('--review_attention', action='store_true')
    parser.add('--density_tempering', action='store_true')
    parser.add('--tensor_add_conv', action='store_true')
    parser.add('--tensor_add_conv_nolearn', action='store_true')

    # Options used for image feedback. Highres will upsamle alphas.
    # drop_imfeedback will add some dropout to the convnet used for feedback.
    parser.add('--imgfeedback_mechanism', type=str)
    parser.add('--drop_imfeedback', type=int)

    # Transformer options
    parser.add('--trans_multiple_boxes', type=int)
    parser.add('--trans_use_state', type=int)
    parser.add('--trans_locnet', type=int)
    parser.add('--trans_nolearn', action='store_true')
    parser.add('--trans_dense_nolearn', action='store_true')
    parser.add('--trans_slowlearn', action='store_true')
    parser.add('--trans_norot', action='store_true')
    parser.add('--trans_stride', type=int)
    parser.add('--trans_use_pretrained', action='store_true')
    parser.add('--trans_zeropad', type=int)
    parser.add('--trans_reglearn', type=float)
    parser.add('--trans_locnet_dropout', type=float)
    parser.add('--trans_regions_dropout', type=float)
    parser.add('--trans_locnet_init', type=float)
    parser.add('--trans_zoom', type=float)
    parser.add('--trans_compress', type=int)
    parser.add('--trans_add_big_proposals', type=int)
    parser.add('--trans_feedback', type=int)

    parser.add('--cnn_slowlearn', type=int)
    parser.add('--set_seed', type=int)

    # Dissected tensor to test WR and RS separately.
    parser.add('--dissect', type=str)

    # Try fix
    parser.add('--skip_zero', action='store_true')
    # Training settings
    parser.add('--proposals', type=int)
    parser.add('--shuffle_boxes', type=int)
    parser.add('--train_only_rnn', action='store_true')
    parser.add('--eval_fixed', action='store_true')
    parser.add('--add_validation', action='store_true')
    # # optimization settings:
    parser.add('--lr', dest='learning_rate', type=float)
    parser.add('--lr_decay_start', type=int)
    parser.add('--lr_decay_epocs', type=float)
    parser.add('--max_epocs', dest='max_epocs', type=int)
    parser.add('--grad_clip', type=float)
    parser.add('--reg_h', dest='reg_h', type=int)
    # Evaluation & caption generation settings
    parser.add('--forbid_naw', action='store_true')
    parser.add('--external_images', type=str)
    parser.add('-z', '--visualize', dest='visualize', type=int)
    parser.add('-l', '--length', dest='test_length', type=int)
    parser.add('--shuffle', dest='shuffle', type=int)
    parser.add('--save_img', type=str)
    parser.add('--save_img_columns', type=int)
    parser.add('--vis_color', type=str)
    parser.add('--results_external', type=str)

    parser.add('--force_proposals', action='store_true')
    parser.add('--force_transformer', action='store_true')
    parser.add('--clip_boxes', action='store_true')
    parser.add('--use_test_split', action='store_true')
    parser.add('--use_newtest_split', action='store_true')
    parser.add('--ensemble', type=int)
    parser.add('--use_rotations', action='store_true')
    parser.add('--trans_force_norot', action='store_true')
    parser.add('--force_all_validation', action='store_true')
    parser.add('--eval_from', type=int)
    parser.add('--skip_basic_img', action='store_true')
    parser.add('--relax_check_init', type=int)

    params = parser.parse_args()
    return vars(params)  # convert to ordinary dict


def updateCFG_testtime(params, CFG):
    UpdateThese = ['ensemble',
                   'skip_basic_img',
                   'results_external',
                   'trans_force_rot',
                   'use_flip',
                   'vis_color',
                   'save_img_columns',
                   'clip_boxes',
                   'use_rotations',
                   'use_test_split',
                   'use_newtest_split',
                   'force_transformer',
                   'force_proposals',
                   'visualize',
                   'save_img'
                   ]
    FalseThese = ['trans_add_big_proposal',
                  'trans_locnet_dropout',
                  'trans_reglearn',
                  'trans_feedback',
                  'trans_norot',
                  'trans_zeropad',
                  'tensor_add_conv',
                  'clean_mask',
                  'trans_multiple_boxes',
                  'trans_use_state'

                  ]

    OverwriteThese = ['conv_reduced',
                      'num_regions',
                      'trans_stride',
                      'max_sent',
                      'tensor_tied']

    # A reminder!!
    print(bcolors.FAIL +
          "Changed the behaviour of conv_reduced" +
          " now it's an integer defining the stride and by default it's the training value" +
          bcolors.ENDC)

    for key in UpdateThese:  # update or initialize
        CFG[key] = params[key]
    for key in FalseThese:   # initialize with False
        if key not in CFG:
            CFG[key] = False
    for key in OverwriteThese:  # overwrite the trained model params
        if parmas[key] != -1:
            CFG[key] = parmas[key]

    if 'trans_zoom' not in CFG:
        CFG['trans_zoom'] = 1.0
    if 'trans_stride' not in CFG:
        CFG['trans_stride'] = 1
    if 'trans_locnet' not in CFG:
        CFG['trans_locnet'] = 0

    if CFG['force_transformer']:
        CFG['mode'] = 'transformer'
        CFG['trans_multiple_boxes'] = True
        CFG['trans_user_pretrained'] = True
        CFG['trans_zeropad'] = 1
        CFG['trans_stride'] = CFG['conv_reduced']

    if CFG['force_proposals']:
        CFG['proposals'] = 4

    if CFG['visualize'] > 0:
        CFG['batch_size'] = 1
    else:
        CFG['batch_size'] = params['batch_size']

    if CFG['save_img'] != '':
        if not os.path.exists(CFG['save_img']):
            os.makedirs(CFG['save_img'])

    # not use anymore precomputed CNN features
    CFG['cnn_fine_tune'] = True

    if CFG['mode'] == 'transformer':
        CFG['num_regions'] = ((14 + CFG['trans_stride'] - 1) / CFG['trans_stride'])**2
    elif CFG['proposals'] == 0:
        CFG['num_regions'] = ((14 + CFG['cinv_reduced'] - 1) / CFG['conv_reduced'])**2

    if 'cnn_model' not in CFG:
        CFG['cnn_model'] = "vgg"
        # Retrocompatibility with weights trained prior to resnet inclusion
    return CFG


def readCFG_traintime(params):
    CFG = params
    # Harmonize some parametrs
    if CFG['trans_stride'] > 1:
        CFG['conv_reduced'] = 0
    if CFG['conv_reduced']:
        CFG['num_regions'] = 7 * 7
    else:
        CFG['num_regions'] = 14 * 14
    if CFG['train_only_cnn']:
        assert(CFG['cnn_fine_tune'])
    if CFG['proposals']:
        CFG['region_size'] = 512
        CFG['num_regions'] = params['num_regions']
    CFG['cnn_model'] = params['cnn_model']
    if CFG['cnn_model'] == 'resnet':  # If we use resnet, penultimate layer has 1000 units.
        CFG['resnet_layer'] = params['resnet_layer']
        print_fail("WARNING: over-riding CFG['region_size'] constant to 1024.")
        CFG['region_size'] = 1024
        if CFG['resnet_layer'] == 'prob':
            CFG['cnn_feature_size'] = 1000
        elif CFG['resnet_layer'] == 'pool5':
            CFG['cnn_feature_size'] = 2048
        else:
            print ("Unknown or unsupported layer choice for resnet")
    print CFG
    return CFG
